// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id        String   @id
  oldId     String? // Store the original hashed ID here
  document  Json // The full JSON document
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Document metadata
  documentUrl    String?
  processingDate DateTime?
  pageCount      Int?
  title          String?
  summary        String?   @db.Text
  fullText       String?   @db.Text
  documentType   String? // Legacy field (for backward compatibility)
  documentGroup  String? // New field for consistent terminology

  // Arrays for data storage (not indexed)
  allNames   String[]
  allPlaces  String[]
  allDates   String[]
  allObjects String[]
  stamps     String[]

  // Search field - concatenated text for full-text search
  searchText String? @db.Text

  // Normalized dates for range searching
  normalizedDates DateTime[]
  earliestDate    DateTime?
  latestDate      DateTime?

  // Boolean flags for quick filtering
  hasHandwrittenNotes Boolean @default(false)
  hasStamps           Boolean @default(false)
  hasFullText         Boolean @default(false)

  // Processing status tracking
  processingStage String? // 'pending', 'downloading', 'processing', 'completed', 'failed'
  processingSteps String[] // Array of completed steps: 'download', 'conversion', 'analysis', 'publishing', 'complete'
  lastProcessed   DateTime?
  processingError String?   @db.Text
  archiveId       String? // References the external archive ID for this document

  // References to related models
  pages            Page[]
  handwrittenNotes HandwrittenNote[]
  documentStamps   DocumentStamp[]

  // Efficient indexes (keeping only what's necessary)
  @@index([documentType])
  @@index([documentGroup])
  @@index([hasHandwrittenNotes])
  @@index([hasStamps])
  @@index([hasFullText])
  @@index([earliestDate, latestDate])
  @@index([processingStage])
  @@index([archiveId])
}

model Page {
  id          String    @id @default(cuid())
  documentId  String
  pageNumber  Int
  imagePath   String
  summary     String?   @db.Text
  fullText    String?   @db.Text
  hasImage    Boolean   @default(false)
  hasText     Boolean   @default(false)
  processedAt DateTime?

  // Relation to parent document
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Composite unique constraint
  @@unique([documentId, pageNumber])
  @@index([pageNumber])
  @@index([hasImage])
  @@index([hasText])
}

model HandwrittenNote {
  id         String  @id @default(cuid())
  documentId String
  pageNumber Int
  content    String  @db.Text
  location   String?

  // Relation to parent document
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId, pageNumber])
  @@index([content])
}

model DocumentStamp {
  id         String  @id @default(cuid())
  documentId String
  pageNumber Int
  type       String?
  date       String?
  text       String

  // Relation to parent document
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId, pageNumber])
  @@index([type])
  @@index([date])
  @@index([text])
}

model Text {
  id                String @id @default(cuid())
  webUrl            String
  arweaveAddress    String
  ipfsAddress       String
  bittorrentAddress String
  filename          String
  size              Int
  contentType       String
}

model Image {
  id                String @id @default(cuid())
  webUrl            String
  arweaveAddress    String
  ipfsAddress       String
  bittorrentAddress String
  filename          String
  contentType       String
  size              Int
  width             Int
  height            Int
  creator           Json
}

model Podcast {
  id             String   @id @default(cuid())
  show           String // DREF of the podcast show
  episodeNum     Int
  seasonNum      Int
  duration       Int
  hosts          String[] @default([]) // Repeated DREF
  guests         String[] @default([]) // Repeated DREF
  explicit       Boolean  @default(false)
  transcript     String?
  chapters       String?
  episodeArtwork String[] @default([]) // Repeated DREF
  podcastArtwork String // DREF
  license        String?
  copyright      String?
  sponsors       String[] @default([])
  rssFeedUrl     String
}

model Video {
  id                String   @id @default(cuid())
  webUrl            String
  arweaveAddress    String
  ipfsAddress       String
  bittorrentAddress String
  filename          String
  size              Int
  width             Int
  height            Int
  duration          Int
  contentType       String
  thumbnails        String[] @default([]) // Repeated DREF for thumbnails
  creator           Json
}

model Audio {
  id                String   @id @default(cuid())
  webUrl            String
  arweaveAddress    String
  ipfsAddress       String
  bittorrentAddress String
  filename          String
  size              Int
  duration          Int
  contentType       String
  thumbnails        String[] @default([]) // Repeated DREF for thumbnails
  creator           Json
}

model Post {
  id                    String   @id @default(cuid())
  webUrl                String   @unique
  title                 String?  // Article title/headline
  sourceId              String?  // Reference to NewsSource.id
  bylineWriter          String
  bylineWritersTitle    String
  bylineWritersLocation String?
  articleText           String // DREF
  featuredImage         String? // DREF
  imageItems            String[] @default([]) // Repeated DREF for images
  imageCaptionItems     String[] @default([]) // Repeated captions for images
  videoItems            String[] @default([]) // Repeated DREF for videos
  audioItems            String[] @default([]) // Repeated DREF for audio
  audioCaptionItems     String[] @default([]) // Repeated captions for audio
  replyTo               String? // DREF of the post being replied to
  summary              String? @db.Text // Short summary of the article
  
  // Relations
  source                NewsSource? @relation(fields: [sourceId], references: [id])
  
  @@index([sourceId])
  @@index([title])
}

model NewsSource {
  id          String   @id @default(cuid())
  name        String   @unique
  url         String   // Main URL from JSON
  icon        String?  // URL to the source's icon/logo
  
  // Selectors as JSONB to store the entire selectors object
  selectors   Json?    // Will store: {"linkFilter": "a[href*=\"/politics/\"]", ...}
  
  // Status fields
  isActive    Boolean  @default(true)
  isDisabled  Boolean  @default(false) // For sources in "disabled" array
  reason      String?  // Reason why disabled (for disabled sources)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  posts       Post[]   // Posts from this source
  
  @@index([name])
  @@index([isActive])
  @@index([isDisabled])
}

// This file extends the Prisma schema with news scraping job models

model ScrapingJob {
  id        String    @id
  type      String
  status    String              // pending | processing | completed | failed
  urls      String[]            // URLs batch (can be empty if type implies discovery)
  settings  Json?               // Input params
  results   String?   @db.Text
  error     String?   @db.Text
  startTime DateTime  @default(now())
  endTime   DateTime?
  stats     Json?

  // New fields
  progress  Int       @default(0)     // 0â€“100
  processed Int       @default(0)     // units done
  total     Int       @default(0)     // planned units
  message   String?                 // short status line
  updatedAt DateTime  @updatedAt

  @@index([status])
  @@index([type])
}